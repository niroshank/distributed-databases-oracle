/*	Author: Niroshan Kumarasinghe 	
	IIT Student No: IIT2019269
	RGU Student No: RGU1912833
	Course: CMM702 Advanced Databases
	Assignment: COURSEWORK PART A
	Question: Number 04
	Description: Creating Tables Under the Relational Model
*/

-------------------- GLOBAL TABLES AND TRANSACTION TABLES --------------------------

BEGIN; -- Creating tables

-- Membership types (VIP or Standard)
CREATE TABLE Membership (
				MembershipId NUMBER NOT NULL,
				Name VARCHAR2(20) NOT NULL,
				Description VARCHAR2(100) NOT NULL,
				CONSTRAINT PK_Membership PRIMARY KEY (MembershipId)
);
/

-- Event Types (Concert, Play, Meal)
CREATE TABLE EventType (
				EventTypeId NUMBER NOT NULL,
				EventType VARCHAR2(20) NOT NULL,
				Description VARCHAR2(100) NOT NULL,
				CONSTRAINT PK_EventType PRIMARY KEY(EventTypeId)
);
/

-- Age Ratings (8 - 15, 18 - 45, 18 - 75)
CREATE TABLE AgeRating (
				AgeRatingNo NUMBER NOT NULL,
				AgeFrom NUMBER NOT NULL,
				AgeTo NUMBER NOT NULL,
				CONSTRAINT PK_AgeRating PRIMARY KEY(AgeRatingNo)
);
/

-- Element Types (Band Group, Catering Service, Cast Member, Singer, Actor)
CREATE TABLE ElementType (
				ElementTypeId NUMBER NOT NULL,
				ElementType VARCHAR2(50) NOT NULL,
				Description VARCHAR2(100) NOT NULL,
				CONSTRAINT PK_ElementType PRIMARY KEY(ElementTypeId)
);
/

-- Perfomr Elements (One Direction Band, Enrique)
CREATE TABLE PerformElement (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				ElementTypeId NUMBER NOT NULL,
				Name VARCHAR2(50) NOT NULL,
				Description VARCHAR2(100) NOT NULL,
				CONSTRAINT PK_PerformElement PRIMARY KEY(Id),
				CONSTRAINT FK_PerformElement_ElementType
					FOREIGN KEY (ElementTypeId) REFERENCES ElementType(ElementTypeId)
);
/

-- Venues (London, Aberdeen)
CREATE TABLE Venue (
				VenueId NUMBER NOT NULL,
				Name VARCHAR2(50) NOT NULL,
				Address VARCHAR2(100) NOT NULL,
				Availability NUMBER NOT NULL,
				Capacity NUMBER NOT NULL,
				UpdatedDate DATE NOT NULL,
				CONSTRAINT PK_Venue PRIMARY KEY(VenueId)
);
/

-- Employees at specific venues
CREATE TABLE Employee (
				EmployeeId NUMBER GENERATED BY DEFAULT AS IDENTITY,
				VenueId NUMBER NOT NULL,
				Name VARCHAR2(100) NOT NULL,
				CONSTRAINT PK_Employee PRIMARY KEY(EmployeeId),
				CONSTRAINT FK_Employee_Venue
					FOREIGN KEY (VenueId) REFERENCES Venue(VenueId)
);
/

-- Employees can be assign to reservation or event item (can be a singer)
CREATE TABLE StaffAssignment (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				EmployeeId NUMBER NOT NULL,
				AssignStartDateTime DATE NOT NULL,
				AssignEndDateTime DATE NOT NULL,
				CONSTRAINT PK_StaffAssignment PRIMARY KEY(Id),
				CONSTRAINT FK_StaffAssignment_Employee
					FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId)					
);
/

-- Membership charges and discount can be changed yearly.
-- Consider only current active Membership Subscription when registering members
CREATE TABLE MembershipSubscription (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				MembershipId NUMBER NOT NULL,
				Fee NUMBER(7,2) NOT NULL,
				Discount NUMBER(7,2) NOT NULL,
				IsActive CHAR(1) DEFAULT ((1)),
				ValidFrom DATE NOT NULL,
				ValidTo DATE NOT NULL,
				CreatedDate DATE DEFAULT SYSDATE,
                CONSTRAINT DF_MembershipSubscription_IsActive CHECK (IsActive IN (1,0)),
				CONSTRAINT PK_MembershipSubscription PRIMARY KEY (Id),
				CONSTRAINT FK_MembershipSubscription_Membership
					FOREIGN KEY (MembershipId) REFERENCES Membership(MembershipId)
);
/

-- Customer personal details and payment details
CREATE TABLE Customer (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				Name NVARCHAR2(100),
				DateOfBirth DATE NOT NULL,
				Address NVARCHAR2(100) NOT NULL,
				PaymentMethod NVARCHAR2(100) NOT NULL,
				CardNumber NUMBER,
				CardExpiredDate DATE,
				CONSTRAINT PK_Customer PRIMARY KEY (Id)
);
/

-- Customer must register first under any membership type.
-- Payment Status (Paid, Suspected, Expired)
CREATE TABLE CustomerMembershipSubscription (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				CustomerId NUMBER NOT NULL,
				MembershipSubscriptionId NUMBER NOT NULL,
				PaymentStatus VARCHAR2(20) NOT NULL,
				UpdatedDate DATE NOT NULL,
				CreatedDate DATE DEFAULT SYSDATE,
				CONSTRAINT PK_CustomerMembershipSubscription PRIMARY KEY(Id),
				CONSTRAINT FK_CustomerMembershipSubscription_Customer
					FOREIGN KEY (CustomerId) REFERENCES Customer(Id)
);
/

-- Membership payments and booking payments
-- AccountType (Subscription, Booking)
CREATE TABLE CustomerPayment (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				CustomerId NUMBER NOT NULL,
				AccountType NVARCHAR2(100) NOT NULL,
				Payment NUMBER(7,2) NOT NULL,
				PaymentDate DATE NOT NULL,
				CONSTRAINT PK_CustomerPayment PRIMARY KEY(Id),
				CONSTRAINT FK_CustomerPayment_Customer
					FOREIGN KEY (CustomerId) REFERENCES Customer(Id)
);
/

-- Event can be assigned to any event type (concert, play or meal)
-- Available tickets will be updated after every booking
CREATE TABLE Event (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				VenueId NUMBER NOT NULL,
				EventTypeId NUMBER NOT NULL,
				AgeRatingNo NUMBER NOT NULL,
				Name VARCHAR2(50) NOT NULL,
				Description VARCHAR2(100) NOT NULL,
				AvailableTickets NUMBER NOT NULL,
				StartDateTime DATE NOT NULL,
				EndDateTime DATE NOT NULL,
				UpdatedDate DATE NOT NULL,
				CreatedDate DATE DEFAULT SYSDATE,
				CONSTRAINT PK_Event PRIMARY KEY(Id),
				CONSTRAINT FK_Event_Venue
					FOREIGN KEY (VenueId) REFERENCES Venue(VenueId),
				CONSTRAINT FK_Event_EventType
					FOREIGN KEY (eventTypeId) REFERENCES EventType(eventTypeId),
				CONSTRAINT FK_Event_AgeRating
					FOREIGN KEY (ageRatingNo) REFERENCES AgeRating(ageRatingNo)						
);
/

-- Event Item can be assigned to any perform element (One Direction, enrique)
-- Separate payments for each any every event item
-- staff member can be assigned to a event item (enrique needs a staff support)
CREATE TABLE EventItem (
				Id NUMBER GENERATED BY DEFAULT AS IDENTITY,
				EventId NUMBER NOT NULL,
				PerformElementId NUMBER NOT NULL,
				StaffAssignmentId NUMBER,
				Payment NUMBER(7,2) NOT NULL,
				PaymentDate DATE NOT NULL,
				IsStaffAssigned CHAR(1) DEFAULT ((0)),
				CONSTRAINT DF_EventItem_IsStaffAssigned CHECK (IsStaffAssigned IN (1,0)),
				CONSTRAINT PK_EventItem PRIMARY KEY(Id),
				CONSTRAINT FK_EventItem_Event
					FOREIGN KEY (EventId) REFERENCES Event(Id),
				CONSTRAINT FK_EventItem_PerformElement
					FOREIGN KEY (PerformElementId) REFERENCES PerformElement(Id),	
				CONSTRAINT FK_EventItem_StaffAssignment
					FOREIGN KEY (StaffAssignmentId) REFERENCES StaffAssignment(Id)						
);
/

-- total bookings can be calculated by summing event item payments
CREATE TABLE Booking (
				BookingNo NUMBER GENERATED BY DEFAULT AS IDENTITY,
				CustomerId NUMBER NOT NULL,
				TotalPayment NUMBER(7,2) NOT NULL,
				CreatedDate DATE DEFAULT SYSDATE,
				CONSTRAINT PK_Booking PRIMARY KEY(BookingNo),
				CONSTRAINT FK_Booking_Customer
					FOREIGN KEY (CustomerId) REFERENCES Customer(Id)
);
/

-- staff member can be assigned to a reservation
CREATE TABLE Reservation (
				ReservationNo NUMBER GENERATED BY DEFAULT AS IDENTITY,
				EventId NUMBER NOT NULL,
				BookingNo NUMBER NOT NULL,
				StaffAssignmentId NUMBER,
				NoOfTickets NUMBER NOT NULL,
				IsStaffAssigned CHAR(1) DEFAULT ((0)),
				CONSTRAINT DF_Reservation_IsStaffAssigned CHECK (IsStaffAssigned IN (1,0)),
				CONSTRAINT PK_Reservation PRIMARY KEY(ReservationNo),
				CONSTRAINT FK_Reservation_Booking
					FOREIGN KEY (BookingNo) REFERENCES Booking(BookingNo),
				CONSTRAINT FK_Reservation_Event
					FOREIGN KEY (EventId) REFERENCES Event(Id),
				CONSTRAINT FK_Reservation_StaffAssignment
					FOREIGN KEY (StaffAssignmentId) REFERENCES StaffAssignment(Id)						
);
/
END;

-------------------- INSERT DATA --------------------------

BEGIN; -- inserting data

INSERT INTO MembershipSubscription(MembershipId,Fee,Discount,ValidFrom,ValidTo) VALUES (1,20000,20,SYSDATE,SYSDATE);
INSERT INTO MembershipSubscription(MembershipId,Fee,Discount,ValidFrom,ValidTo) VALUES (1,20000,20,SYSDATE,SYSDATE);
/
END;

-------------------- CLEAR ALL DATA --------------------------

BEGIN; -- clearing data

DROP TABLE Reservation;
/

DROP TABLE Booking;
/

DROP TABLE EventItem;
/

DROP TABLE Event;
/

DROP TABLE CustomerMembershipSubscription;
/

DROP TABLE Customer;
/

DROP TABLE MembershipSubscription;
/

DROP TABLE StaffAssignment;
/

DROP TABLE Employee;
/

DROP TABLE Venue;
/

DROP TABLE PerformElement;
/

DROP TABLE ElementType;
/

DROP TABLE AgeRating;
/

DROP TABLE EventType;
/

DROP TABLE Membership;
/

END;




























